
project_name   : "lumiere";
version        : "1.0.0";
out_dir        : "../out";
build_dir      : "bld";
sdk_dir        : "sdk";
runtime_dir    : "rt";
download_dir   : "dl";
frameworks_dir : "Frameworks";
manifests_dir  : "media/Plugins";
plugin_dir     : "media/Plugins/bin"; // plugins will be placed in Plugins/bin, manifests will be placed in
verbose        : true;
unity_build    : true;

preset "win-avx-dbg"
{
  display_name         = "Windows-x64-AVX";
  build_type           = debug;
  allow                = [avx, debug, windows];
  disallow             = [release];
  static_libs          = false;
  cppcheck             = true;
  cppcheck_suppression = "cppcheck_ignore.txt";

  config [msvc]
  {
    compiler_flags  : [ "/std:c++latest", "/Zc:__cplusplus", "/EHsc", "/arch:AVX", "/Zc:preprocessor", "/source-charset:utf-8", "/bigobj" ];
    linker_flags    : [ "/debug", "-incremental:no" ];
  }
  config [gcc]
  {
    compiler_flags  : [
      "-fcoroutines",
      "-fno-exceptions",
      "-mavx",
      "-std=c++2a"
    ];
  }
}

preset "linux-avx-dbg"
{
  display_name = "Linux-x64-AVX";
  build_type   = debug;
  allow        = [avx, debug, linux];
  disallow     = [release];
  static_libs  = false;

  config [msvc]
  {
    compiler_flags  : [ "/std:c++latest", "/Zc:__cplusplus", "/EHsc", "/arch:AVX", "/Zc:preprocessor", "/source-charset:utf-8" ];
    linker_flags    : [ "/debug", "-incremental:no" ];
  }
  config [gcc]
  {
    compiler_flags  : [
      "-fcoroutines",
      "-mavx",
      "-std=c++2a"
    ];
  }
}

preset "windows-avx-asan"
{
  display_name = "Windows-x64-AVX-ASAN";
  build_type   = debug;
  allow        = [asan, avx, debug, windows];
  disallow     = release;
  static_libs  = false;
  config [msvc]
  {
    compiler_flags : [ "/std:c++latest", "/Zc:__cplusplus", "/EHsc", "/arch:AVX", "/Zc:preprocessor", "/source-charset:utf-8", "/fsanitize=address", "/bigobj"  ];
    linker_flags   : [ "/debug", "-incremental:no", "/wholearchive:clang_rt.asan_dbg_dynamic-x86_64.lib", "/wholearchive:clang_rt.asan_dbg_dynamic_runtime_thunk-x86_64.lib" ];
  }
  config [gcc]
  {
    compiler_flags : [
      "-fcoroutines",
      "-fsanitize=address",
      "-fsanitize=leak",
      "-mavx",
      "-std=c++2a"
    ];
    linker_flags : [ "-fsanitize=address", "-fsanitize=leak" ];
  }
}
